// Package swagdocs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagdocs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Check server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.HttpSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.HttpFail"
                        }
                    }
                }
            }
        },
        "/lat/{lat}/lon/{lon}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Get state from lat, lon and send covstats in that state and India",
                "parameters": [
                    {
                        "type": "string",
                        "description": "latitude",
                        "name": "lat",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "longitude",
                        "name": "lon",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.HttpSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.RegionInfo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.HttpFail"
                        }
                    }
                }
            }
        },
        "/states": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Get Covid Stats for all States in India from mohfw",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.HttpSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.RegionInfo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.HttpFail"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.RegionInfo": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "11503"
                },
                "cured": {
                    "type": "string",
                    "example": "2024645"
                },
                "death": {
                    "type": "string",
                    "example": "14176"
                },
                "new_active": {
                    "type": "string",
                    "example": "11142"
                },
                "new_cured": {
                    "type": "string",
                    "example": "2025805"
                },
                "new_death": {
                    "type": "string",
                    "example": "14186"
                },
                "new_positive": {
                    "type": "string",
                    "example": "20511233"
                },
                "positive": {
                    "type": "string",
                    "example": "2050324"
                },
                "region_code": {
                    "type": "string",
                    "example": "28"
                },
                "region_name": {
                    "type": "string",
                    "example": "Andhra Pradesh"
                },
                "rno": {
                    "type": "string",
                    "example": "1"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-10-03T01:01:13.303+05:30"
                }
            }
        },
        "wrapper.HttpFail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "wrapper.HttpSuccess": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Data source is mohfw"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:1323",
	BasePath:    "/",
	Schemes:     []string{"http"},
	Title:       "Covstats Swagger API",
	Description: "Covid Stats for your region",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
